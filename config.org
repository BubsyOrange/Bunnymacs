#+TITLE: Bunnymacs
#+AUTHOR: Bubsy Orange
#+STARTUP: showeverything

* TABLE OF CONTENTS :TOC:
- [[#install-and-load-first][INSTALL AND LOAD FIRST]]
  - [[#straightel][Straight.el]]
  - [[#use-package][Use-Package]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#native-compilation][Native Compilation]]
- [[#all-the-icons][ALL-THE-ICONS]]
- [[#buffers][BUFFERS]]
  - [[#buffer-keybindings][Buffer Keybindings]]
  - [[#buffer-move][Buffer-Move]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
- [[#files][FILES]]
  - [[#file-related-keybindings][File-related Keybindings]]
  - [[#useful-file-related-modules][Useful File-related Modules]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#functionality][FUNCTIONALITY]]
  - [[#turn-yes-or-no-into-y-or-n][Turn 'yes-or-no' into 'y-or-n']]
  - [[#disable-auto-saves-and-backups][Disable Auto-Saves and Backups]]
  - [[#set-utf-8-everywhere][Set UTF-8 Everywhere]]
  - [[#enable-clipboard-outside-of-emacs][Enable Clipboard Outside of Emacs]]
  - [[#enable-conservative-scrolling][Enable Conservative Scrolling]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#ivy-counselswiper][IVY (COUNSEL/SWIPER)]]
  - [[#ivy-configuration][Ivy Configuration]]
  - [[#m-x-improvements][M-x Improvements]]
- [[#modeline][MODELINE]]
- [[#org-mode][ORG MODE]]
  - [[#basic-org-settings][Basic Org Settings]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-keybindings][Org Keybindings]]
- [[#programming-support][PROGRAMMING SUPPORT]]
  - [[#yasnippet][Yasnippet]]
  - [[#eldoc][Eldoc]]
  - [[#lsp-mode][LSP Mode]]
  - [[#company][Company]]
  - [[#c--c][C & C++]]
  - [[#elixir][Elixir]]
  - [[#gdscript][GDScript]]
  - [[#go][Go]]
  - [[#haskell][Haskell]]
  - [[#json][JSON]]
  - [[#julia][Julia]]
  - [[#latex][LaTeX]]
  - [[#lua][Lua]]
  - [[#markdown][Markdown]]
  - [[#php][PHP]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#scala][Scala]]
  - [[#web][Web]]
  - [[#yaml][YAML]]
- [[#projectile][PROJECTILE]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#splits-and-windows][SPLITS AND WINDOWS]]
  - [[#keybindings-for-window-splits-and-motions][Keybindings For Window Splits and Motions]]
  - [[#keybindings-to-move-windows-buffers][Keybindings To Move Windows (Buffers)]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#treemacs][TREEMACS]]
- [[#which-key][WHICH-KEY]]
- [[#runtime-performance][RUNTIME PERFORMANCE]]

* INSTALL AND LOAD FIRST
** Straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Use-Package
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

** General Keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

;; set up 'SPC' as the global leader key
(general-create-definer bo/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader
  :global-prefix "M-SPC") ;; access leader in insert mode

(bo/leader-keys
  "t" '(:ignore t :wk "Toggle")

 (bo/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable"))))
#+end_src

* STARTUP PERFORMANCE
Make Emacs load faster.

** Garbage Collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compilation
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* ALL-THE-ICONS
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

* BUFFERS
** Buffer Keybindings

#+begin_src emacs-lisp
(bo/leader-keys
  "b" '(:ignore t :wk "buffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b i" '(ibuffer :wk "Ibuffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer"))
#+end_src

** Buffer-Move
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win)
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src


* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-refresh-buffer t) 
  (setq dashboard-set-heading-icons t) 
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "B U N N Y M A C S")
  (setq dashboard-startup-banner "~/.emacs.d/img/Bunnymacs.png")
  ;; (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-center-content t) ;; set 'nil' to disable centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 3)
                          (bookmarks . 3)
                          (projects . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
  (setq dashboard-set-footer nil)

;; Opens dashboard instead of scratch buffer when running emacsclient
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
 #+end_src

* DIMINISH
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* DIRED
Dired is the main file-explorer in Emacs.

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                 | KEYBINDING |
|--------------------+---------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | SPC d v    |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(bo/leader-keys
  "d d" '(dired :wk "Open dired")
  "d j" '(dired-jump :wk "Dired jump to current")
  "d p" '(peep-dired :wk "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'xviewer' and all .mp4 files to open in 'celluloid'
(setq dired-open-extensions '(("gif" . "xviewer")
                              ("jpg" . "xviewer")
                              ("png" . "xviewer")
                              ("mkv" . "celluloid")
                              ("mp4" . "celluloid")
                              ("webm" . "celluloid")))
#+end_src

* FILES
** File-related Keybindings
| COMMAND         | DESCRIPTION     | KEYBINDING |
|-----------------+-----------------+------------|
| counsel-M-x     | M-x             | SPC SPC    |
| find-file       | /Find file/       | SPC f f    |
| counsel-recentf | /Recent files/    | SPC d j    |
| save-buffer     | /Save file/       | SPC f s    |
| copy-file       | /Copy file/       | SPC f C    |
| delete-file     | /Delete file/     | SPC f D    |
| rename-file     | /Rename file/     | SPC f R    |
| write-file      | /Save file as.../ | SPC f S    |

#+begin_src emacs-lisp
(bo/leader-keys
  "SPC" '(counsel-M-x :wk "M-x")
  "f f"   '(find-file :wk "Find file")
  "f r" '(counsel-recentf :wk "Recent files")
  "f s" '(save-buffer :wk "Save file")
  "f C" '(copy-file :wk "Copy file")
  "f D" '(delete-file :wk "Delete file")
  "f R" '(rename-file :wk "Rename file")
  "f S" '(write-file :wk "Save file as..."))
#+end_src

** Useful File-related Modules
#+begin_src emacs-lisp
(use-package recentf
  :config
  (recentf-mode))
#+end_src

* FONTS
** Setting the Font Face
#+begin_src emacs-lisp
(defun efs/set-font-faces ()
(set-face-attribute 'default nil
  :font "JetBrainsMono Nerd Font Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "JetBrainsMono Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMono Nerd Font Mono"
  :height 110
  :weight 'medium))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                ;; (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (efs/set-font-faces))))
    (efs/set-font-faces))
#+end_src

** Zooming In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* FUNCTIONALITY
** Turn 'yes-or-no' into 'y-or-n'
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disable Auto-Saves and Backups
#+begin_src emacs-lisp
(setq make-backup-file nil)
(setq auto-save-default nil)
#+end_src

** Set UTF-8 Everywhere
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

** Enable Clipboard Outside of Emacs
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

** Enable Conservative Scrolling
#+begin_src emacs-lisp
(setq scroll-conservatively 101)
#+end_src

* GUI TWEAKS
Make Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
(global-visual-line-mode t)
#+end_src

* IVY (COUNSEL/SWIPER)
** Ivy Configuration
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

(use-package swiper
  :after ivy
  :bind ("C-s" . swiper))
#+end_src

** M-x Improvements
Removes the annoying '^' when using 'counsel-M-x'.

#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src

* MODELINE
Use Doom Modeline as the default modeline.

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
  :config
  (setq doom-modeline-icon t)
#+end_src

* ORG MODE
** Basic Org Settings
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Org/"
      org-agenda-files '("~/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-log-done 'time
      org-journal-dir "~/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+end_src

** Enable Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(diminish 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Source Code Block Tag Expansion
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Org Keybindings
| COMMAND                  | DESCRIPTION              | KEYBINDING |
|--------------------------+--------------------------+------------|
| org-ctrl-c-star          | Org-ctrl-c-star          | SPC m *    |
| org-ctrl-c-minus         | Org-ctrl-c-minus         | SPC m +    |
| counsel-org-goto         | Counsel org goto         | SPC m .    |
| org-export-dispatch      | Org export dispatch      | SPC m e    |
| org-footnote-new         | Org footnote new         | SPC m f    |
| org-toggle-heading       | Org toggle heading       | SPC m h    |
| org-toggle-item          | Org toggle item          | SPC m i    |
| org-store-link           | Org store link           | SPC m n    |
| org-set-property         | Org set property         | SPC m o    |
| org-todo                 | Org todo                 | SPC m t    |
| org-toggle-checkbox      | Org toggle checkbox      | SPC m x    |
| org-babel-tangle         | Org babel tangle         | SPC m B    |
| org-toggle-inline-images | Org toggle inline imager | SPC m I    |
| org-todo-list            | Org todo list            | SPC m T    |
| org-agenda               | Org agenda               | SPC o a    |

#+begin_src emacs-lisp
(bo/leader-keys
   "m *"   '(org-ctrl-c-star :wk "Org-ctrl-c-star")
   "m +"   '(org-ctrl-c-minus :wk "Org-ctrl-c-minus")
   "m ."   '(counsel-org-goto :wk "Counsel org goto")
   "m e"   '(org-export-dispatch :wk "Org export dispatch")
   "m f"   '(org-footnote-new :wk "Org footnote new")
   "m h"   '(org-toggle-heading :wk "Org toggle heading")
   "m i"   '(org-toggle-item :wk "Org toggle item")
   "m n"   '(org-store-link :wk "Org store link")
   "m o"   '(org-set-property :wk "Org set property")
   "m t"   '(org-todo :wk "Org todo")
   "m x"   '(org-toggle-checkbox :wk "Org toggle checkbox")
   "m B"   '(org-babel-tangle :wk "Org babel tangle")
   "m I"   '(org-toggle-inline-images :wk "Org toggle inline imager")
   "m T"   '(org-todo-list :wk "Org todo list")
   "o a"   '(org-agenda :wk "Org agenda"))
#+end_src


* PROGRAMMING SUPPORT
** Yasnippet
Snippets.

#+begin_src emacs-lisp
(use-package yasnippet
  :config
    ;;(use-package yasnippet-snippets)
    ;;(use-package auto-yasnippet)
  (yas-reload-all)
  (yas-global-mode))

;; Collection of snippets from Doom Emacs.
(use-package doom-snippets
  :after yasnippet
  :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))

(global-set-key (kbd "C-c y") 'yas-insert-snippet)
#+end_src

** Eldoc
Display documentation.

#+begin_src emacs-lisp
(use-package eldoc
  :hook (after-init . global-eldoc-mode))
#+end_src

** LSP Mode
LSP support for Emacs.

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp)

(use-package lsp-ui
  :commands lsp-ui-mode)

;; Ivy support for LSP Mode
(use-package lsp-ivy
  :commands lsp-ivy-workspace-symbol)
#+end_src

** Company
Provides us with completitons

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :config
  (company-keymap--unbind-quick-access company-active-map)
  (setq company-dabbrev-other-buffers t
        company-dabbrev-code-other-buffers t)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.1)
  :hook ((text-mode . company-mode)
         (prog-mode . company-mode)
         (org-mode . company-mode)
         (company-mode . yas-minor-mode)
         (lsp-mode . company-mode)))

(add-hook 'after-init-hook 'global-company-mode)
#+end_src

** C & C++
#+begin_src emacs-lisp

#+end_src

** Elixir
#+begin_src emacs-lisp
(use-package elixir-mode)
#+end_src

** GDScript
#+begin_src emacs-lisp
(use-package gdscript-mode)
#+end_src

** Go
#+begin_src emacs-lisp
(use-package go-mode)
#+end_src

** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src

** JSON
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

** Julia
#+begin_src emacs-lisp
(use-package julia-mode)
(use-package eglot-jl)
#+end_src

** LaTeX
#+begin_src emacs-lisp
#+end_src

** Lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** PHP
#+begin_src emacs-lisp
(use-package php-mode)
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python-mode)
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

** Scala
#+begin_src emacs-lisp
(use-package scala-mode)
#+end_src

** Web
#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode +1))
#+end_src

* RELOAD EMACS
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))

(bo/leader-keys
  "h r r" '(reload-init-file :wk "Reload emacs config"))
#+end_src

* SPLITS AND WINDOWS
** Keybindings For Window Splits and Motions
| COMMAND            | DESCRIPTION             | KEYBINDING |
|--------------------+-------------------------+------------|
| evil-window-delete | /Close window/            | SPC w c    |
| evil-window-new    | /New window/              | SPC w n    |
| evil-window-split  | /Horizontal split window/ | SPC w s    |
| evil-window-vsplit | /Vertical split window/   | SPC w v    |
| evil-window-left   | /Window left/             | SPC w h    |
| evil-window-down   | /Window down/             | SPC w j    |
| evil-window-up     | /Window up/               | SPC w k    |
| evil-window-right  | /Window right/            | SPC w l    |
| evil-window-next   | /Goto next window/        | SPC w w    |

** Keybindings To Move Windows (Buffers)
| COMMAND        | DESCRIPTION       | KEYBINDING |
|----------------+-------------------+------------|
| buf-move-left  | /Buffer move left/  | SPC w H    |
| buf-move-down  | /Buffer move down/  | SPC w J    |
| buf-move-up    | /Buffer move up/    | SPC w K    |
| buf-move-right | /Buffer move right/ | SPC w L    |

#+begin_src emacs-lisp
(bo/leader-keys
  "w" '(:ignore t :wk "Windows")
  ;; Window splits
  "w c" '(evil-window-delete :wk "Close window")
  "w n" '(evil-window-new :wk "New window")
  "w s" '(evil-window-split :wk "Horizontal split window")
  "w v" '(evil-window-vsplit :wk "Vertical split window")
  ;; Window motions
  "w h" '(evil-window-left :wk "Window left")
  "w j" '(evil-window-down :wk "Window down")
  "w k" '(evil-window-up :wk "Window up")
  "w l" '(evil-window-right :wk "Window right")
  "w w" '(evil-window-next :wk "Goto next window")
  ;; Move Windows
  "w H" '(buf-move-left :wk "Buffer move left")
  "w J" '(buf-move-down :wk "Buffer move down")
  "w K" '(buf-move-up :wk "Buffer move up")
  "w L" '(buf-move-right :wk "Buffer move right"))
#+end_src

* SHELLS AND TERMINALS
** Eshell
Eshell is Emacs' very own "shell" written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

(bo/leader-keys
  "t e" '(eshell-toggle :wk "Toggle eshell"))
#+end_src

** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq shell-file-name "/usr/bin/fish"))
#+end_src

** Vterm Toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))

(bo/leader-keys
  "t v" '(vterm-toggle :wk "Toggle vterm"))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (bo/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* THEME
The theme that I use for Emacs is Catppuccin. But, feel free to add your own!

#+begin_src emacs-lisp
(use-package catppuccin-theme)
(load-theme 'catppuccin t)
(setq catppuccin-flavor 'macchiato) ;; Available options are 'frappe, 'latte, 'macchiato or 'mocha
(catppuccin-reload) 
#+end_src

* TREEMACS
| COMMAND  | DESCRIPTION     | KEYBINDING |
|----------+-----------------+------------|
| treemacs | Toggle treemacs | SPC t t    |

#+begin_src emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-show-hidden-files t)
  (setq treemacs-width 30))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :if (display-graphic-p)
  :config (treemacs-icons-dired-mode))

(use-package treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(bo/leader-keys
  "t t" '(treemacs :wk "Toggle treemacs"))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* RUNTIME PERFORMANCE
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
